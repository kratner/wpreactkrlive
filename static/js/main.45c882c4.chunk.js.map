{"version":3,"sources":["components/GetDataWPRESTAPI.js","components/ProjectLinksList.js","components/SocialLinksList.js","components/KRMonogramSVG.js","components/Copyright.js","components/BGVideoSwitch.js","components/NavBar.js","components/VideoBackground.js","App.js","serviceWorker.js","index.js"],"names":["appQueryUrl","concat","qryPostsFromLinksCategory","ProjectLinksList","state","posts","_this2","this","appUrl","fetch","then","data","json","setState","listProjectLinks","filter","node","acf","type","sort","a","b","weight","map","index","react_default","createElement","key","href","className","class","title","rendered","target","text","icon","id","Component","SocialLinksList","listSocialLinks","KRMonogramSVG","xlinkHref","xmlns","xmlnsXlink","in","stdDeviation","dx","dy","result","floodColor","in2","operator","viewBox","points","Copyright","copyrightYear","Date","getFullYear","BGVideoSwitch","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","videoURLs","switchBackgroundVideo","videoElement","videoSource","toggle","handleClick","bind","assertThisInitialized","isVisible","document","getElementsByClassName","style","visibility","toggleBGVideoSwitch","populateVideoURLArray","arr","el_video","el_source","new_random_item","Math","floor","random","length","setAttribute","load","videoURLArray","data-ctl","onClick","NavBar","components_Copyright","components_BGVideoSwitch","VideoBackground","autoPlay","loop","muted","playsInline","src","App","components_VideoBackground","components_NavBar","components_KRMonogramSVG","components_ProjectLinksList","components_SocialLinksList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45c882c4.chunk.js","sourcesContent":["let appUrl = 'https://keithratner.live';\n//let appUrl = 'http://krlocalwp.localhost';\nlet appJSONEndpoint = '/wp-json';\nlet appRESTAPITrunk = '/wpcms/v1';\nlet RESTEndpointPostsByCategory = '/posts-by-category/';\nexport const appQueryUrl = `${appUrl}${appJSONEndpoint}${appRESTAPITrunk}${RESTEndpointPostsByCategory}?`;\nexport const qryPostsFromLinksCategory = `${appQueryUrl}name=links`;\n","import React, { Component } from 'react';\nimport { qryPostsFromLinksCategory } from './GetDataWPRESTAPI';\n\nclass ProjectLinksList extends Component {\n  state = {\n    posts: []\n  };\n\n  componentDidMount() {\n    let appUrl = `${qryPostsFromLinksCategory}`;\n    fetch(appUrl)\n      .then(data => data.json())\n      .then(data => {\n        this.setState({\n          posts: data\n        });\n      });\n  }\n\n  render() {\n    let listProjectLinks = this.state.posts\n      .filter(node => node.acf.type === 'project')\n      .sort((a, b) =>\n        a.acf.weight > b.acf.weight ? 1 : -1\n      )\n      .map((node, index) => {\n        return (\n          <li key={index}>\n            <a\n              href={node.acf.href}\n              className={node.acf.class}\n              title={node.title.rendered}\n              target={node.acf.target}\n            >\n              {node.acf.text}\n              <span\n                className={\n                  'icon-' + node.acf.icon + ' inline-icon'\n                }\n              />\n            </a>\n          </li>\n        );\n      });\n\n    return (\n      <div id=\"project-links\">\n        <div className=\"link-padding\">\n          <ul>{listProjectLinks}</ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ProjectLinksList;\n","import React, { Component } from 'react';\nimport { qryPostsFromLinksCategory } from './GetDataWPRESTAPI';\n\nclass SocialLinksList extends Component {\n  state = {\n    posts: []\n  };\n\n  componentDidMount() {\n    let appUrl = `${qryPostsFromLinksCategory}`;\n    fetch(appUrl)\n      .then(data => data.json())\n      .then(data => {\n        this.setState({\n          posts: data\n        });\n      });\n  }\n\n  render() {\n    let listSocialLinks = this.state.posts\n      .filter(node => node.acf.type === 'social')\n      .sort((a, b) =>\n        a.acf.weight > b.acf.weight ? 1 : -1\n      )\n      .map((node, index) => {\n        return (\n          <li key={index}>\n            <a\n              href={node.acf.href}\n              className={node.acf.class}\n              title={node.title.rendered}\n              target={node.acf.target}\n            >\n              {node.acf.text}\n              <span className={'icon-' + node.acf.icon} />\n            </a>\n          </li>\n        );\n      });\n\n    return (\n      <div\n        className=\"social-links\"\n        id=\"social-links-container\"\n      >\n        <ul>{listSocialLinks}</ul>\n      </div>\n    );\n  }\n}\n\nexport default SocialLinksList;\n","import React, { Component } from 'react';\n\nclass KRMonogramSVG extends Component {\n  render() {\n    return (\n      <div className=\"kr-monogram__parent\">\n        <div className=\"kr-monogram\">\n          <svg className=\"icon\">\n            <use\n              className=\"sprite__monogram\"\n              xlinkHref=\"#monogram\"\n            />\n          </svg>\n        </div>\n        <div className=\"svg-sprites\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          >\n            <defs>\n              <filter id=\"drop-shadow\">\n                <feGaussianBlur\n                  in=\"SourceAlpha\"\n                  stdDeviation=\"1\"\n                />\n                <feOffset\n                  dx=\"1\"\n                  dy=\"1\"\n                  result=\"offsetblur\"\n                />\n                <feFlood floodColor=\"rgba(0,0,0,1)\" />\n                <feComposite\n                  in2=\"offsetblur\"\n                  operator=\"in\"\n                />\n                <feMerge>\n                  <feMergeNode />\n                  <feMergeNode in=\"SourceGraphic\" />\n                </feMerge>\n              </filter>\n\n              <symbol\n                id=\"monogram\"\n                viewBox=\"560 1790 200 200\"\n              >\n                <polygon\n                  id=\"glyph_x5F__x5F_right\"\n                  points=\"674.331,1891.881 746,1939.049 682.765,1891.277\n                711.96,1859.64 657.285,1862.205 698.104,1864.282 \"\n                />\n                <polygon\n                  id=\"glyph_x5F__x5F_middle\"\n                  points=\"693.824,1963.297\n                638.749,1861.327 693.824,1804.035 649.28,1861.851 \"\n                />\n                <polygon\n                  id=\"glyph_x5F__x5F_left\"\n                  points=\"600.744,1977.16\n                660.771,1913.468 591.762,1860.794 631.498,1860.705\n                574.999,1858.154 653.576,1915.606 \"\n                />\n              </symbol>\n            </defs>\n          </svg>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default KRMonogramSVG;\n","import React, { Component } from 'react';\n\nclass Copyright extends Component {\n  render() {\n    let copyrightYear = (() => new Date())().getFullYear();\n    return (\n      <span className=\"copyright\">\n        &copy;{copyrightYear}\n      </span>\n    );\n  }\n}\n\nexport default Copyright;\n","import React, { Component } from 'react';\nimport { qryPostsFromLinksCategory } from './GetDataWPRESTAPI';\n\nclass BGVideoSwitch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggle: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.state.switchBackgroundVideo(\n      this.state.videoURLs,\n      this.state.videoElement,\n      this.state.videoSource\n    );\n  }\n  toggleBGVideoSwitch(isVisible) {\n    document.getElementsByClassName(\n      'ctl__bgvideoswitch'\n    )[0].style.visibility = isVisible\n      ? 'visible'\n      : 'hidden';\n  }\n  state = {\n    videoURLs: [],\n    switchBackgroundVideo: {},\n    videoElement: {},\n    videoSource: {}\n  };\n\n  // $('[data-ctl=bgvideoswitch]')\n\n  componentDidMount() {\n    this.toggleBGVideoSwitch(false);\n    let appUrl = `${qryPostsFromLinksCategory}`;\n    let arrVideoURLs = ['/img/20181215_154218.mp4'];\n    fetch(appUrl)\n      .then(data => data.json())\n      .then(data => {\n        this.state.populateVideoURLArray(data);\n        this.state.switchBackgroundVideo(\n          this.state.videoURLs,\n          this.state.videoElement,\n          this.state.videoSource\n        );\n        this.toggleBGVideoSwitch(true);\n      });\n\n    this.setState({\n      videoURLs: arrVideoURLs,\n      videoElement: document.getElementsByClassName(\n        'video-background__video'\n      ),\n      videoSource: document.getElementsByClassName(\n        'video-background__video__source'\n      ),\n      switchBackgroundVideo: (arr, el_video, el_source) => {\n        let new_random_item = Math.floor(\n          Math.random() * arr.length\n        );\n        el_source[0].setAttribute(\n          'src',\n          arr[new_random_item]\n        );\n        el_video[0].load();\n      },\n      populateVideoURLArray: data => {\n        let videoURLArray = data\n          .filter(node => node.acf.type === 'video')\n          .sort((a, b) =>\n            a.acf.weight > b.acf.weight ? 1 : -1\n          )\n          .map((node, index) => {\n            return node.acf.href;\n          });\n        this.setState({\n          videoURLs: videoURLArray\n        });\n        //this.state.toggleBGVideoSwitch(true);\n      }\n    });\n  }\n  render() {\n    return (\n      <span\n        data-ctl=\"bgvideoswitch\"\n        className=\"ctl icon-video-camera ctl__bgvideoswitch\"\n        title=\"Switch Video Background\"\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport default BGVideoSwitch;\n","import React, { Component } from 'react';\nimport Copyright from './Copyright';\nimport BGVideoSwitch from './BGVideoSwitch';\nclass NavBar extends Component {\n  render() {\n    return (\n      <div className=\"nav\">\n        <Copyright />\n        <BGVideoSwitch />\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\n\nclass VideoBackground extends Component {\n  render() {\n    return (\n      <div className=\"video-background\">\n        <video\n          autoPlay\n          loop\n          className=\"video-background__video\"\n          muted\n          playsInline\n        >\n          <source\n            src=\"/img/20181215_154218.mp4\"\n            type=\"video/mp4\"\n            className=\"video-background__video__source\"\n          />\n        </video>\n      </div>\n    );\n  }\n}\n\nexport default VideoBackground;\n","import React, { Component } from 'react';\nimport './styles/normalize.css';\nimport './styles/App.scss';\nimport ProjectLinksList from './components/ProjectLinksList';\nimport SocialLinksList from './components/SocialLinksList';\nimport KRMonogramSVG from './components/KRMonogramSVG';\nimport NavBar from './components/NavBar';\nimport VideoBackground from './components/VideoBackground';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <VideoBackground />\n        <NavBar />\n        <KRMonogramSVG />\n        <div className=\"splash-container theme-light\">\n          <div className=\"front\">\n            <div className=\"brand-title\">\n              <h1>Keith Ratner</h1>\n            </div>\n            <ProjectLinksList />\n            <SocialLinksList />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}